import java.io.*;import java.util.*;class FormatException extends Exception{    public FormatException(String msg){        super(msg);    }}class Parser{    private final String Val ;    public Parser(String val){        Val = val.trim();    }    public String[] parse() throws FormatException {        if (Val.trim().startsWith("@")) {            return new String[]{ Val.substring(1)};        }        else{            String dest = null;            String comp = null;            String jump = null;            if (Val.contains("=")){                String[] parts = Val.trim().split("=");                if (parts.length != 2) {                    throw new FormatException("error at: "+Val);                }                dest = parts[0].trim();                if(parts[1].contains(";")){                    String[] remainingparts =  parts[1].split(";");                    if (remainingparts.length != 2) {                        throw new FormatException("error at: "+Val);                    }                    comp = remainingparts[0].trim();                    jump = remainingparts[1].trim();                }                else {                    comp = parts[1].trim();                }            }else if (Val.contains(";")){                String[] parts = Val.split(";");                if (parts.length != 2) {                    throw new FormatException("error at: "+Val);                }                comp = parts[0].trim();  // YYY                jump = parts[1].trim();            }else throw new FormatException("error at: "+Val);            if(dest!=null&&dest.isEmpty()||comp.isEmpty()||jump!=null&&jump.isEmpty()) {                throw new FormatException("error at: " + Val);            }            return new String[]{dest,comp,jump};        }    }}class Coder{    private final String[]  Val ;    public Coder( String[] val){        Val= val;    }    public String code() throws FormatException {        if(Val.length == 1){            int x = Integer.parseInt(Val[0]);            if(x>= 32768 ){                throw new FormatException("negative numbers not allowed "+Val[0]+">=32768");            }            String binary= Integer.toBinaryString(x);            return String.format("%16S",binary).replace(' ','0');        }else if (Val.length == 3){            String result = "111";            //comp            switch (Val[1]){                case "0": result+= "0101010";break;                case "1": result+= "0111111";break;                case "-1": result+= "0111010";break;                case "D": result+= "0001100";break;                case "A": result+= "0110000";break;                case "!D": result+= "0001101";break;                case "!A": result+= "0110001";break;                case "-D": result+= "0001111";break;                case "-A": result+= "0110011";break;                case "D+1": result+= "0011111";break;                case "A+1": result+= "0110111";break;                case "D+A": result+= "0000010";break;                case "D-A": result+= "0010011";break;                case "A-D": result+= "0000111";break;                case "D&A": result+= "0000000";break;                case "D|A": result+= "0010101";break;                case "M": result+= "1110000";break;                case "!M": result+= "1110001";break;                case "-M": result+= "1110011";break;                case "M+1": result+= "1110111";break;                case "M-1": result+= "1110010";break;                case "D+M": result+= "1000010";break;                case "D-M": result+= "1010011";break;                case "M-D": result+= "1000111";break;                case "D&M": result+= "1000000";break;                case "D|M": result+= "1010101";break;                case "D-1": result+= "0001110";break;                case "A-1": result+= "0110010";break;                default: throw new FormatException("error at: "+Val[1]) ;            }            //dest            if (Val[0]== null) result+="000";            else{                switch (Val[0]){                    case "M": result+= "001";break;                    case "D": result+= "010";break;                    case "MD": result+= "011";break;                    case "A": result+= "100";break;                    case "AM": result+= "101";break;                    case "AD": result+= "110";break;                    case "AMD": result+= "111";break;                    default: throw new FormatException("error at: "+Val[2]) ;                }            }            //jump            if(Val[2]==null) result +="000";            else {                switch (Val[2]){                    case "JGT": result+= "001";break;                    case "JEQ": result+= "010";break;                    case "JGE": result+= "011";break;                    case "JlT": result+= "100";break;                    case "JNE": result+= "101";break;                    case "JLE": result+= "110";break;                    case "JMP": result+= "111";break;                    default: throw new FormatException("error at: "+Val[2]) ;                }            }            return result;        }else throw new FormatException("error at: "+ Arrays.toString(Val));    }}public class Main {    public static void main(String[] args) throws IOException {        if(args.length< 1){            System.out.println("Enter file name as argument.");            System.exit(-1);        }        BufferedReader inputStream = null;        PrintWriter outputStream = null;        try {            File f = new File(args[0]);            if(!f.exists() || f.isDirectory()){                System.out.println("File name does not exist.");                System.exit(-1);            }            Hashtable<String, Integer> hashtable = new Hashtable<>();            hashtable.put("R0",0);hashtable.put("R1",1);hashtable.put("R2",2);            hashtable.put("R3",3);hashtable.put("R4",4);hashtable.put("R5",5);            hashtable.put("R6",6);hashtable.put("R7",7);hashtable.put("R8",8);            hashtable.put("R9",9);hashtable.put("R10",10);hashtable.put("R11",11);            hashtable.put("R12",12);hashtable.put("R13",13);hashtable.put("R14",14);            hashtable.put("R15",15);            hashtable.put("SCREEN",16384);hashtable.put("KBD",24576);            hashtable.put("SP",0);hashtable.put("LCL",1);hashtable.put("ARG",2);            hashtable.put("THIS",3);hashtable.put("THAT",4);            inputStream = new BufferedReader(new FileReader(args[0]));            String[] parse = args[0].split("\\.");            outputStream = new PrintWriter(new FileWriter(parse[0]+".hack"));            int line_num = 1;            String line = "";            int i=1;            int var=16;            while (line  != null  ) {                if(!line.isEmpty()   && !line.startsWith("//")){                    if(i==3){                        try {                            if(!line.startsWith("(") && !line.endsWith(")")){                                if(line.startsWith("@")&& line.substring(1).matches(".*[a-zA-Z].*")){                                    String symbol = line.substring(1);                                    //System.out.println(hashtable.get("n"));                                    line = '@'+ hashtable.get(symbol).toString();                                }                                Parser p = new Parser(line);                                Coder c = new Coder(p.parse());                                outputStream.println(c.code());                            }                        }catch (FormatException e){                            System.out.println(e.getMessage()+" at line: "+line_num);                        }                    }else if(i==2){                        String symbol = line.substring(1);                        boolean a = line.startsWith("@");                        boolean b = symbol.matches(".*[a-zA-Z].*");                        boolean c = hashtable.containsKey(symbol);                        if(a && b && !c){                            hashtable.put(symbol,var);                            var++;                        }                    }else {                        if(line.startsWith("(") && line.endsWith(")")){                            String symbol =line.substring(1,line.length()-1);                            if(!hashtable.contains(symbol)){                                hashtable.put(symbol,line_num-1);                                line_num--;                            }                        }                    }                    line_num++;                }                line = inputStream.readLine();                line = line ==null? line:line.trim();                if(i<3 && line  == null){                   // hashtable.keys().asIterator().forEachRemaining(System.out::println);                    inputStream = new BufferedReader(new FileReader(args[0]));                    line = inputStream.readLine().trim();                    line_num=1;                    i++;                }            }        }catch(IOException e){            e.printStackTrace();;        }finally {            if (inputStream != null) {                inputStream.close();            }            if (outputStream != null) {                outputStream.close();            }        }    }}